pipeline {
    parameters{
        booleanParam(
            name: 'INCREMENT_FILEHOST_VERSION',
            defaultValue: false,
            description: '''If set to true, this build will copy the pdfs to the filehost with an incremented filehost version number
If set to false (default), this build will copy the pdfs to the filehost, replacing the latest filehost version''')

        string(name: 'RELEASE_DESCRIPTION',
        defaultValue: 'latest build',
        description: 'The description to appear against the filehost version upload')
    }
    agent {
        docker { image 'megatex' }
    }
    stages {
        stage('Cleanup') {
            steps {
                sh 'make realclean'
            }
        }
        stage('Fetch mega65-core dev branch') {
            steps {
                sh 'rm -rf m65dev && mkdir m65dev'
                sh 'git clone --depth 1 --branch development https://github.com/MEGA65/mega65-core.git m65dev/mega65-core'
                sh 'git clone --depth 1 --branch development https://github.com/MEGA65/mega65-libc.git m65dev/mega65-libc'
            }
        }
        stage('Build MEGA65 Book') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE', catchInterruptions: false) {
                    sh "make REPOPATH=m65dev mega65-book.pdf"
                }
            }
            post {
                always { // without the always, the failure won't be executed!
                    echo "end of build"
                }
                failure {
                    echo "removing failed build PDF"
                    sh "rm -vf mega65-book.pdf"
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: "mega65-*.pdf*",
                fingerprint: true
        }
    }
}
